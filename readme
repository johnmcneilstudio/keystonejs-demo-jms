brew install node
brew install mongodb
npm install -g yo
npm install -g generator-keystone


yo keystone


Sample Generator script

Welcome to KeystoneJS.

? What is the name of your project? Studio CMS
? Would you like to use Jade, Nunjucks, Twig or Handlebars for templates? [jade | nunjucks | twig | hbs] jade
? Which CSS pre-processor would you like? [less | sass | stylus] sass
? Would you like to include a Blog? Yes
? Would you like to include an Image Gallery? Yes
? Would you like to include a Contact Form? Yes
? What would you like to call the User model? User
? Enter an email address for the first Admin user: syoung@johnmcneilstudio.com
? Enter a password for the first Admin user:
 Please use a temporary password as it will be saved in plain text and change it after the first login. admin
? Would you like to include gulp or grunt? [gulp | grunt | none] gulp
? Would you like to create a new directory for your project? No
? ------------------------------------------------
    KeystoneJS integrates with Mandrill (from Mailchimp) for email sending.
    Would you like to include Email configuration in your project? No
? ------------------------------------------------
    KeystoneJS integrates with Cloudinary for image upload, resizing and
    hosting. See http://keystonejs.com/docs/configuration/#services-cloudinary for more info.

    CloudinaryImage fields are used by the blog and gallery templates.

    You can skip this for now (we'll include demo account details)

    Please enter your Cloudinary URL:
? ------------------------------------------------
    Finally, would you like to include extra code comments in
    your project? If you're new to Keystone, these may be helpful. Yes

=======

Including posts and galleries in the scaffolding will provide a couple of starter content types.

Initial Structure of the site
+-models
+-public
+-routes
+-templates
+-updates

'models' contains Javascript files defining the content types to be served.
There is one file per content type. http://keystonejs.com/docs/database/

'public' contains static assets

'routes' contain your applications views and controllers.

'routes/views' will contain javascript files, again one per model.
These files contain application login to interact models and render views.
If you are fluent in MVC these files could be considered the 'controllers' in the app.
So the name might be misleading, but don't let the smooth taste fool you.
KeystoneJS describes itself as MV* for those keeping score.

'templates' has one folder 'views'

'updates' contains scripts to used to update data.
These seem to be analogous to Rails migrations but it remains to be seen if these are as robust.

========

Cool. Things seem to be working. I can add content. And view my site. Now what?
Lets push it to the cloud for the world to see. Okay. Done. Let's take a look.
